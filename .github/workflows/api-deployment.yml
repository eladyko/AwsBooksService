name: API workflow deployment

on:
 push:
   branches: [ master ]

jobs:
 build:
   name: Build API
   runs-on: ubuntu-latest
   env:
     working-directory: './src'
   steps:
   - uses: actions/checkout@v3
   - uses: actions/setup-dotnet@v3
     with:
       dotnet-version: '6.0.x'
   - name: Restore dependencies
     run: dotnet restore AwsBooksService.sln
     working-directory: ${{env.working-directory}}
   - run: dotnet build --no-restore
     working-directory: ${{env.working-directory}}    
   # - run: dotnet test --no-build --verbosity normal
   #   working-directory: ${{env.working-directory}}

 deploy-dev:
   name: Deploy to Dev
   if: github.event.ref == 'refs/heads/master'
   runs-on: ubuntu-latest
   needs: [build]

   steps:
   - name: Checkout
     uses: actions/checkout@v3

   - name: Configure AWS credentials
     uses: aws-actions/configure-aws-credentials@v2
     with:
       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       aws-region: eu-central-1

   - name: Login to Amazon ECR
     id: login-ecr
     uses: aws-actions/amazon-ecr-login@v1

   - name: Build, tag, and push image to Amazon ECR
     id: build-image
     env:
       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
       ECR_REPOSITORY: awsbooksservice
       IMAGE_TAG: ${{ github.sha }}
     run: |
       # Build a docker container and
       # push it to ECR so that it can
       # be deployed to ECS.
       docker build -f src/AwsBooksService/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG src/
       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
       echo "{image}={$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG} >> $GITHUB_OUTPUT"

   - name: Fill in the new image ID in the Amazon ECS task definition
     id: task-def
     uses: aws-actions/amazon-ecs-render-task-definition@v1
     with:
       task-definition: .github/task-definitions/api-task-definition.json
       container-name: books-service-container
       image: ${{ steps.build-image.outputs.image }}

   - name: Deploy Amazon ECS task definition
     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
     with:
       task-definition: ${{ steps.task-def.outputs.task-definition }}
       service: api-service
       cluster: AutomatedCluster
       wait-for-service-stability: true